import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './Progress.css'; // –°–æ–∑–¥–∞–¥–∏–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å—Ç–∏–ª–µ–π
import { API_EXAM_URL } from '../../Config';
const Progress = ({ onBack }) => {
  const studentName = localStorage.getItem('full_name');
  const [ratings, setRatings] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchRatings = async () => {
      try {
        const studentId = localStorage.getItem('id'); // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ ID —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ localStorage
        const response = await axios.post(`${API_EXAM_URL}/student-rating`, {
          student_id: studentId
        });
        
        if (response.data.status && response.data.data.length > 0) {
          setRatings(response.data.data[0]);
        } else {
          setError('–î–∞–Ω–Ω—ã–µ –æ–± —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }
      } catch (err) {
        setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö');
        console.error('Error fetching ratings:', err);
      } finally {
        setLoading(false);
      }
    };

    fetchRatings();
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–∏–∞–≥—Ä–∞–º–º—ã
  const renderBar = (value, max = 100, label) => {
    const percentage = Math.min(value, max);
    return (
      <div className="bar-container">
        <div className="bar-label">{label}</div>
        <div className="bar">
          <div 
            className="bar-fill" 
            style={{ width: `${percentage}%` }}
          ></div>
          <span className="bar-value">{value}%</span>
        </div>
      </div>
    );
  };

  return (
    <div className="content-section">
      <div className="welcome-section">
        <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {studentName}! üëã</h2>
        <p>–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å</p>
      </div>
      
      <div className="ratings-container">
        <h3>–í–∞—à–∞ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å</h3>
        
        {loading && <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>}
        {error && <p className="error-message">{error}</p>}
        
        {ratings && (
          <div className="ratings-grid">
            <div className="rating-card">
              <h4>–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥</h4>
              <div className="big-rate">{ratings.rate}</div>
              {renderBar(ratings.rate, 100, '–û–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥')}
            </div>
            
            <div className="rating-card">
              <h4>–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è</h4>
              <div className="rate-value">{ratings.homework_rate}</div>
              {renderBar(ratings.homework_rate, 100, '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –î–ó')}
            </div>
            
            <div className="rating-card">
              <h4>–¢–µ—Å—Ç—ã</h4>
              <div className="rate-value">{ratings.test_rate}</div>
              {renderBar(ratings.test_rate, 100, '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤')}
            </div>
            
            <div className="rating-card">
              <h4>–≠–∫–∑–∞–º–µ–Ω—ã</h4>
              <div className="rate-value">{ratings.exam_rate}</div>
              {renderBar(ratings.exam_rate, 100, '–≠–∫–∑–∞–º–µ–Ω–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏')}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default Progress;