import React, { useState, useEffect } from 'react';
import axios from 'axios';
import HomeworkStudents from './HomeworkStudents';
import { API_BASE_URL } from '../../Config';
import './HomeworkList.css';

const HomeworkList = () => {
  const [homeworks, setHomeworks] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [expandedId, setExpandedId] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
  const [homeworksPerPage] = useState(6);

  const toggleHomework = (id) => {
    if (expandedId !== id) {
      setExpandedId(id);
    }
  };

  useEffect(() => {
    const fetchHomeworks = async () => {
      try {
        const response = await axios.get(`${API_BASE_URL}/api/get-homeworks`);
        
        if (response.data?.status && Array.isArray(response.data?.res)) {
          setHomeworks(response.data.res);
        } else {
          throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö');
        }
      } catch (err) {
        setError(err.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π');
        console.error('–û—à–∏–±–∫–∞:', err);
      } finally {
        setLoading(false);
      }
    };

    fetchHomeworks();
  }, []);

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞–Ω–∏—è
  const indexOfLastHomework = currentPage * homeworksPerPage;
  const indexOfFirstHomework = indexOfLastHomework - homeworksPerPage;
  const currentHomeworks = homeworks.slice(indexOfFirstHomework, indexOfLastHomework);

  // –ú–µ–Ω—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
  const paginate = (pageNumber) => setCurrentPage(pageNumber);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –¥–µ–¥–ª–∞–π–Ω–∞
  const getDeadlineColor = (deadline) => {
    if (!deadline) return '#95a5a6'; // –°–µ—Ä—ã–π –¥–ª—è –∑–∞–¥–∞–Ω–∏–π –±–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞
    
    const today = new Date();
    const deadlineDate = new Date(deadline);
    const diffTime = deadlineDate - today;
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    if (diffDays < 0) return '#e74c3c'; // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö
    if (diffDays <= 2) return '#f39c12'; // –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö (1-2 –¥–Ω—è)
    if (diffDays <= 7) return '#f1c40f'; // –ñ–µ–ª—Ç—ã–π –¥–ª—è —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö (3-7 –¥–Ω–µ–π)
    return '#27ae60'; // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–µ–¥–ª–∞–π–Ω–∞
  const getDeadlineText = (deadline) => {
    if (!deadline) return '–ù–µ —É–∫–∞–∑–∞–Ω';
    
    const today = new Date();
    const deadlineDate = new Date(deadline);
    const diffTime = deadlineDate - today;
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    if (diffDays < 0) return `–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ –Ω–∞ ${Math.abs(diffDays)} –¥–Ω.`;
    if (diffDays === 0) return '–ò—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è';
    if (diffDays === 1) return '–ò—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞';
    if (diffDays <= 7) return `–û—Å—Ç–∞–ª–æ—Å—å ${diffDays} –¥–Ω.`;
    return new Date(deadline).toLocaleDateString('ru-RU');
  };

  if (loading) return <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π...</div>;
  if (error) return <div className="error">{error}</div>;

  return (
    <>
    <div className="homework-list">
      
        {currentHomeworks.map(hw => (
          <div 
            key={hw.id} 
            className={`homework-card ${expandedId === hw.id ? 'expanded' : ''}`}
            onClick={() => toggleHomework(hw.id)}
          >
            {/* –û—Å—Ç–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π */}
            <div className="hw-main-content">
              <div className="hw-header">
                <span className="hw-type">{hw.type}</span>
                <h3 className="hw-title">{hw.name}</h3>
                <div className="hw-deadline">
                  üìÖ –î–µ–¥–ª–∞–π–Ω: {hw.deadline ? new Date(hw.deadline).toLocaleDateString('ru-RU') : '–ù–µ —É–∫–∞–∑–∞–Ω'}
                </div>
              </div>
              <div className={`expand-icon ${expandedId === hw.id ? 'expanded' : ''}`}>
                {expandedId === hw.id ? '‚ñ≤' : '‚ñº'}
              </div>
              
              {expandedId === hw.id && (
                <button 
                  className="close-btn"
                  onClick={(e) => {
                    e.stopPropagation();
                    setExpandedId(null);
                  }}
                >
                  –ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ
                </button>
              )}
            </div>
            
            {expandedId === hw.id && (
              <div className="hw-details">
                <HomeworkStudents homeworkId={hw.id} />
              </div>
            )}
          </div>
        ))}
      

      
    </div>
    {/* –ü–∞–≥–∏–Ω–∞—Ü–∏—è */}
      <div className="pagination">
        {Array.from({ length: Math.ceil(homeworks.length / homeworksPerPage) }).map((_, index) => (
          <button
            key={index}
            onClick={() => paginate(index + 1)}
            className={`pagination-btn ${currentPage === index + 1 ? 'active' : ''}`}
          >
            {index + 1}
          </button>
        ))}
      </div>
    </>
  );
};

export default HomeworkList;